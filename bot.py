import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
from dotenv import load_dotenv
import os

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
GROQ_TEXT_MODEL = "llama3-8b-8192"  # –¢–µ–∫—Å—Ç: Llama 3 8B (–±—ã—Å—Ç—Ä—ã–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π)
GROQ_VISION_MODEL = "llama-3.2-11b-vision-preview"  # –§–æ—Ç–æ: Llama 3.2 11B Vision

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

client = OpenAI(api_key=GROQ_API_KEY, base_url="https://api.groq.com/openai/v1")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_html(
        "ü§ñ <b>Groq AI Vision Bot 2025</b>\n\n"
        "üìù –ü–∏—à–∏ –≤–æ–ø—Ä–æ—Å—ã (Llama 3 8B)\n"
        "üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ - —Ä–∞—Å–ø–æ–∑–Ω–∞—é! (Llama 3.2 Vision)\n"
        "üí¨ –û–±–Ω–æ–≤–ª–µ–Ω–æ: 17.10.2025"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text
    user = update.effective_user
    logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç {user.id}: {user_message}")

    try:
        response = client.chat.completions.create(
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ—á–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."},
                {"role": "user", "content": user_message}
            ],
            model=GROQ_TEXT_MODEL,  # –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
            temperature=0.7,
            max_tokens=1024,
        )
        await update.message.reply_text(response.choices[0].message.content.strip())
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–∞: {str(e)}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    photo = update.message.photo[-1]
    logger.info(f"–§–æ—Ç–æ –æ—Ç {user.id}")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await context.bot.get_file(photo.file_id)
        photo_bytes = await file.download_as_bytearray()
        
        # Vision –∑–∞–ø—Ä–æ—Å
        response = client.chat.completions.create(
            messages=[
                {
                    "role": "system", 
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º. –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ: —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ, —Ü–≤–µ—Ç–∞, —ç–º–æ—Ü–∏–∏, —Ç–µ–∫—Å—Ç. –ù–∞ —Ä—É—Å—Å–∫–æ–º!"
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ!"},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{photo_bytes.hex()}"
                            }
                        }
                    ]
                }
            ],
            model=GROQ_VISION_MODEL,  # Vision –º–æ–¥–µ–ª—å!
            temperature=0.3,
            max_tokens=1500,
        )
        
        ai_response = response.choices[0].message.content.strip()
        await update.message.reply_text(f"üñºÔ∏è <b>–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ (Llama 3.2 Vision):</b>\n\n{ai_response}", parse_mode='HTML')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: {str(e)}")
        logger.error(f"Vision Error: {e}")

def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    print("üöÄ Groq Vision Bot 2025 –∑–∞–ø—É—â–µ–Ω! –ú–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    application.run_polling()

if __name__ == '__main__':
    main()
